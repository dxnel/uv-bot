import discord
from discord.ext import commands
from discord import app_commands
import json
import re
from datetime import datetime
import tempfile
from io import BytesIO

# D√©finir les intentions de votre bot
intents = discord.Intents.default()
intents.messages = True  # Activer les intentions li√©es aux messages
intents.message_content = True  # Activer les intentions li√©es aux messages
intents.presences = True

# Initialiser le bot avec les intentions
bot = commands.Bot(command_prefix='uv!', intents=intents)

# √âv√©nement pour d√©tecter quand le bot est pr√™t
@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
    except Exception as e:
        print(e)
    
# √âv√©nement pour d√©tecter les messages entrants
@bot.event
async def on_message(message):
    # V√©rifier si le message contient exactement "y/n" en tant que mot distinct
    if "y/n" in message.content:
        # R√©pondre "Bonjour!"
        # Ajouter une r√©action avec l'emoji vers le haut (fl√®che)
        await message.add_reaction('‚¨ÜÔ∏è')
        # Ajouter une r√©action avec l'emoji vers le bas
        await message.add_reaction('‚¨áÔ∏è')
    
    # Toujours n√©cessaire pour g√©rer les autres √©v√©nements de message
    await bot.process_commands(message)

@bot.tree.command(name="uvmcsmp",description="Pr√©sente des informations sur l'event [uv]mcsmp.")
async def smp(interaction: discord.Interaction):
    await interaction.response.send_message(f"{interaction.user.mention} https://discord.gg/D2peqCa4vA?event=1207816940626771968")

@bot.tree.command(name="say", description="Envoie un message personnalis√© sur un salon textuel.")
@app_commands.describe(texte="Le message √† envoyer", salon_textuel="Lien du salon textuel")
async def say(interaction: discord.Interaction, texte: str, salon_textuel: discord.TextChannel = None):
    if salon_textuel is not None:  
                await salon_textuel.send(texte)
                embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + "Message envoy√© sur " + salon_textuel.jump_url , color=discord.Color.green())
                await interaction.response.send_message(embed=embed)
    else:
            erreur = "Le salon textuel n'existe pas."
            embed = discord.Embed(description=f"‚ùå** ErreurÔΩú**" + f"{erreur}" , color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
        

@bot.tree.command(name="avatar",description="Affiche l'avatar d'un utilisateur.")
@app_commands.describe(utilisateur="L'utilisateur dont vous voulez connaitre l'avatar")
async def avatar(interaction: discord.Interaction,  utilisateur: discord.Member ):
    embed = discord.Embed(title=f"Avatar de {utilisateur.display_name}",  color=discord.Color.from_rgb(193,168,233) )
    embed.set_image(url=utilisateur.avatar)
    
    download_link = f"[__Lien de l'image__]({utilisateur.avatar})"
    embed.add_field(name="", value=download_link)
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="profileavatar",description="Affiche l'avatar de profil d'un utilisateur.")
@app_commands.describe(utilisateur="L'utilisateur dont vous voulez connaitre l'avatar")
async def profileavatar(interaction: discord.Interaction,  utilisateur: discord.Member ):
    embed = discord.Embed(title=f"Avatar de {utilisateur.display_name}",  color=discord.Color.from_rgb(193,168,233) )
    embed.set_image(url=utilisateur.display_avatar)
    
    download_link = f"[__Lien de l'image__]({utilisateur.display_avatar})"
    embed.add_field(name="", value=download_link)
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="servericon",description="Affiche l'ic√¥ne du serveur actuel.")
async def servericon(interaction: discord.Interaction):
    guild_id = interaction.guild_id
    guild = bot.get_guild(guild_id)
    embed = discord.Embed(title=f"Ic√¥ne du serveur {guild}",  color=discord.Color.from_rgb(193,168,233) )
    embed.set_image(url=guild.icon.url)
    download_link = f"[__Lien de l'image__]({guild.icon})"
    embed.add_field(name="", value=download_link)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="help",description="Affiche des informations concernant [uv]bot.")
async def help(interaction: discord.Interaction):
 
    embed = discord.Embed(title="[uv]bot", description="[uv]bot est un bot discord cr√©e exclusivement pour le serveur ultraviolet et pr√©sente de nombreuses fonctionnalit√©es essentielles. \n\n La liste des commandes et fonctionnalit√©es est affich√© sur le projet Github.", color=discord.Color.from_rgb(193,168,233))
    view = discord.ui.View() # Establish an instance of the discord.ui.View class
    style = discord.ButtonStyle.grey  # The button will be gray in color
    item = discord.ui.Button(style=style, label="Github", url="https://github.com/dxnuv/uv-bot")  # Create an item to pass into the view class.
    view.add_item(item=item)  # Add that item into the view class
    await interaction.response.send_message(embed=embed,view=view)


    
@bot.tree.command(name="loveletter",description="D√©voile l'amour que tu portes envers une personne de ce serveur.")
@app_commands.describe(utilisateur="L'utilisateur dont vous voulez connaitre l'avatar", message="Le message que vous voulez envoyer √† votre cutie lover", anonyme="Afichage (ou non) de votre pseudo")
async def loveletter(interaction: discord.Interaction, utilisateur: discord.Member , message: str, anonyme: bool = False):
    guild_id = interaction.guild_id
    guild = bot.get_guild(guild_id)
    
    embed = discord.Embed(title=f"üíå Un membre du serveur {guild} vous a envoy√© une lettre d'amour...", color=discord.Color.from_rgb(242, 80, 83))
    embed.set_thumbnail(url=guild.icon.url)
    embed.add_field(name="Cher,", value=utilisateur.mention, inline=False)
    embed.add_field(name="Message :", value=message, inline=False)
    if anonyme:
        embed.add_field(name="Sign√©, ", value="pookie bear anonyme ü•∞")
    else:
        embed.add_field(name="Sign√©, ", value=interaction.user.mention + " ü•∞")
        # Envoyer l'embed par message priv√© √† l'utilisateur
        await utilisateur.send(embed=embed)
        embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + "üíå Lettre d'amour envoy√© √† " + utilisateur.mention , color=discord.Color.green())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
@bot.tree.command(name="archive", description="Archive un salon textuel.")
@app_commands.describe(salon_textuel="Lien du salon textuel")
async def archive(interaction: discord.Interaction, salon_textuel: discord.TextChannel):

    if interaction.user.guild_permissions.administrator:
         # Retirer les caract√®res sp√©ciaux du nom du salon
         nom_salon_archives = re.sub(r'[^\w\s-]', '', salon_textuel.name)
    # G√©n√©rer la date actuelle au format DD-MM-YY
         date_formattee = datetime.now().strftime("%d-%m-%y")
    # Cr√©er le nouveau nom du salon d'archives
         nom_salon_archives += f"-{date_formattee}"
         categorie_archives = discord.utils.get(interaction.guild.categories, name="üì¶ archives")

         if categorie_archives is None:
             erreur = "La cat√©gorie 'üì¶ archives' n'a pas √©t√© trouv√©e."
             embed = discord.Embed(description=f"‚ùå** ErreurÔΩú**" + f"{erreur}" , color=discord.Color.red())
             await interaction.response.send_message(embed=embed, ephemeral=True)
         else:
              # D√©placer le salon textuel vers la cat√©gorie "ARCHIVES"
             await salon_textuel.edit(category=categorie_archives)

             salon_textuel_og = salon_textuel.name
         # Renommer le salon textuel avec le nouveau nom d'archives
             await salon_textuel.edit(name=nom_salon_archives)

         # Placer le salon textuel en haut de la liste des salons de la cat√©gorie "ARCHIVES"
             await salon_textuel.edit(position=0)

             embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + f"Le salon textuel '{salon_textuel_og}' a √©t√© archiv√© avec succ√®s." , color=discord.Color.green())
             await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
            erreur = "Vous n'avez pas les permissions requises pour √©x√©cuter cette commande."
            embed = discord.Embed(description=f"‚ùå** ErreurÔΩú**" + f"{erreur}" , color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    
@bot.tree.command(name="lock",description="D√©sactive un salon textuel.")
@app_commands.describe(salon_textuel="Le salon que vous souhaitez d√©sactiver")
async def lock(interaction: discord.Interaction, salon_textuel: discord.TextChannel = None):
     if interaction.user.guild_permissions.administrator:
          if salon_textuel is None:
                await interaction.channel.set_permissions(interaction.guild.default_role, send_messages=False)
                embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + f"Le salon textuel {interaction.channel.jump_url} a √©t√© d√©sactiv√© avec succ√®s." , color=discord.Color.green())
                await interaction.response.send_message(embed=embed)
          else:
               await salon_textuel.set_permissions(interaction.guild.default_role, send_messages=False)
               embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + f"Le salon textuel {salon_textuel.jump_url} a √©t√© d√©sactiv√© avec succ√®s." , color=discord.Color.green())
               await interaction.response.send_message(embed=embed)


     else:
             erreur = "Vous n'avez pas les permissions requises pour √©x√©cuter cette commande."
             embed = discord.Embed(description=f"‚ùå** ErreurÔΩú**" + f"{erreur}" , color=discord.Color.red())
             await interaction.response.send_message(embed=embed, ephemeral=True)    

@bot.tree.command(name="unlock",description="R√©active un salon textuel d√©sactiv√©.")
@app_commands.describe(salon_textuel="Le salon que vous souhaitez r√©activer")
async def unlock(interaction: discord.Interaction, salon_textuel: discord.TextChannel = None):
     if interaction.user.guild_permissions.administrator:
          if salon_textuel is None:
                await interaction.channel.set_permissions(interaction.guild.default_role, send_messages=True)
                embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + f"Le salon textuel {interaction.channel.jump_url} a √©t√© r√©activ√© avec succ√®s." , color=discord.Color.green())
                await interaction.response.send_message(embed=embed)
          else:
               await salon_textuel.set_permissions(interaction.guild.default_role, send_messages=True)
               embed = discord.Embed(description=f"‚úÖ** Bravo!ÔΩú**" + f"Le salon textuel {salon_textuel.jump_url} a √©t√© r√©activ√© avec succ√®s." , color=discord.Color.green())
               await interaction.response.send_message(embed=embed)


     else:
             erreur = "Vous n'avez pas les permissions requises pour √©x√©cuter cette commande."
             embed = discord.Embed(description=f"‚ùå** ErreurÔΩú**" + f"{erreur}" , color=discord.Color.red())
             await interaction.response.send_message(embed=embed, ephemeral=True)    




with open('config.json', encoding="utf-8", errors="ignore") as f:
    data = json.load(f)
    token = data["token"]
bot.run(token)
